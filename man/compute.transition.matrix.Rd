% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RWRandMatrices.R
\name{compute.transition.matrix}
\alias{compute.transition.matrix}
\title{Computes the transition matrix of a multiplex and heterogeneous network}
\usage{
compute.transition.matrix(x,lambda = 0.5, delta1=0.5, delta2=0.5)
}
\arguments{
\item{x}{A \code{MultiplexHet} object describing a multiplex and
heterogeneous network generated by the function
\code{create.multiplexHet}.}

\item{lambda}{A numeric value between 0 and 1. It sets the probability of
jumping within a network or change to the other network of the heterogeneous
system. It is set by default to 0.5. See more details below.}

\item{delta1}{A numeric value between 0 and 1. It sets the probability
of performing inter-layer versus intra-layer transitions in the first 
multiplex. It is set by default to 0.5. See more details below.}

\item{delta2}{A numeric value between 0 and 1. It sets the probability
of performing inter-layer versus intra-layer transitions in the second 
multiplex. It is set by default to 0.5. See more details below.}
}
\value{
A square sparse transition matrix created with the \code{Matrix}
package. It is the transition matrix for the Random Walk with Restart on
Multiplex and Heterogeneous networks algorithm.
}
\description{
\code{compute.transition.matrix} is a function to compute the transition
matrix of a multiplex heterogeneous network provided as a \code{MultiplexHet}
object.
}
\details{
We clarify the role of the different parameters in this point:
\itemize{
\item \code{lambda}: For a given node, if a bipartite association exists,
the particle can either jump between networks or stay in the current
graph with a probability given by this parameter. The closer lambda is to
one, the higher is the probability of jumping between networks following
bipartite interactions.
\item \code{delta}: This parameter sets the probability to change between
layers at the next step. If delta = 0, the particle will always remain
in the same layer after a non-restart iteration. On the other hand, if
delta = 1, the particle will always change between layers, therefore
not following the specific edges of each layer.
}
}
\examples{
m1 <- igraph::graph(c(1,2,1,3,2,3), directed = FALSE)
m2 <- igraph::graph(c(1,3,2,3,3,4,1,4), directed = FALSE)
multiObject_1 <- create.multiplex(list(m1=m1,m2=m2))
h1 <- igraph::graph(c("A","C","B","E","E","D","E","C"), directed = FALSE)
bipartite_relations <- data.frame(m=c(1,3),h=c("A","E"))
multiObject_2 <- create.multiplex(list(h1=h1))
multiHetObject <- create.multiplexHet(multiObject_1, multiObject_2,
    bipartite_relations)
compute.transition.matrix(multiHetObject)

}
\seealso{
\code{\link{create.multiplexHet},
\link{compute.adjacency.matrix}}
}
\author{
Alberto Valdeolivas Urbelz \email{alvaldeolivas@gmail.com}
}
