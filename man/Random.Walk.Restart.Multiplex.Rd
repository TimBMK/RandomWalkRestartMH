% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RWRandMatrices.R
\name{Random.Walk.Restart.Multiplex}
\alias{Random.Walk.Restart.Multiplex}
\alias{Random.Walk.Restart.Multiplex.default}
\title{Performs Random Walk with Restart on a Multiplex Network}
\usage{
Random.Walk.Restart.Multiplex(...)

\method{Random.Walk.Restart.Multiplex}{default}(
  x,
  MultiplexObject,
  Seeds,
  r = 0.7,
  tau,
  MeanType = "Geometric",
  DispResults = "TopScores",
  ...
)
}
\arguments{
\item{...}{Further arguments passed to \code{Random.Walk.Restart.Multiplex}}

\item{x}{An object of the \code{Matrix} package describing a column
normalized adjacency matrix of a multiplex network.}

\item{MultiplexObject}{A \code{Multiplex} object generated by the function
\code{create.multiplex} representing a multiplex network.}

\item{Seeds}{A vector containing the names of the seeds for the Random
Walk algorithm. See more details below.}

\item{r}{A numeric value between 0 and 1. It sets the probability of
restarting to a seed node after each step. See more details below.}

\item{tau}{A vector containing the probability of restart on the seeds
of the different layers (layers weights). It must have the same length than
the number of layers of the multpiplex network. The sum of its components
divided by the number of layers must be 1. See more details below.}

\item{MeanType}{The user can choose one of the following options: 
c("Geometric","Arithmetic","Sum"). These options represent the different way
to combine the RWR score for the same node in different layers. By default 
and recommended Geometric (Geometric Mean.). Arithmetic is the arithmetic 
mean and sum just sum all the scores for the same node across the different
layers.}

\item{DispResults}{The user can choose one of the following options: 
c("TopScores","Alphabetic"). These options represent the way the RWR results
would be presented. By default, and recommended, the nodes would be ordered
by score. This option is also required to properly run the 
\code{create.multiplexNetwork.topResults} and 
\code{create.multiplexHetNetwork.topResults} functions}
}
\value{
A \code{RWRM_Results} object. It contains a sorted ranking of all
the nodes of the multiplex network, except the seeds, along with their score.
In addition, it contains in a different field the nodes used as seeds.
}
\description{
\code{Random.Walk.Restart.Multiplex} is a function to perform a Random Walk
with Restart on a Multiplex network (on a \code{Multiplex} object). See
more details about the algorithm below.
}
\details{
Random Walk with Restart simulates an imaginary particle that
starts on a seed(s) node(s) and follows randomly the edges of a network. At
each step, there is a restart probability, r, meaning that the particle comes
back to the seed(s). The extension to multiplex networks allows the particle
to explore different monoplex networks (layers). At each step, the particle
can also jump to the same node in a different layer.


\itemize{
\item \code{Seeds}: A vector containing the name of the different seed
node(s). It's mandatory to provide at least one seed. The seed(s) node(s)
should belong to any of the layers. The length of this vector should be
smaller than the total number of nodes in the multiplex network.
\item \code{r}: A numeric value representing the restart probability on the
seeds for the random walker. It must be between 0 and 1. It is set by default
to 0.7, which is the most common value in this kind of approaches. It means
that, at each step, the walker has a 70\% of probability of coming back to
one of the seeds.
\item \code{tau}: A numeric vector containing the probability of restarting
in the nodes of the different layers of the multiplex. In the example below,
we define the node 1 as the seed node. However, we can find this node in both
layers. Therefore, the walker can restart in any of these seed nodes. It is
a way to give different relevance (weight) to the different layers.
}
}
\examples{
m1 <- igraph::graph(c(1,2,1,3,2,3), directed = FALSE)
m2 <- igraph::graph(c(1,3,2,3,3,4,1,4), directed = FALSE)
multiObject <- create.multiplex(list(m1=m1,m2=m2))
AdjMatrix <- compute.adjacency.matrix(multiObject)
AdjMatrixNorm <- normalize.multiplex.adjacency(AdjMatrix)
SeedNodes <- c(1)
Random.Walk.Restart.Multiplex(AdjMatrixNorm,multiObject,SeedNodes)

}
\seealso{
\code{\link{create.multiplex},
\link{compute.adjacency.matrix}, \link{normalize.multiplex.adjacency},
\link{isRWRM_Results}, \link{Random.Walk.Restart.MultiplexHet}}
}
\author{
Alberto Valdeolivas Urbelz \email{alvaldeolivas@gmail.com}
}
